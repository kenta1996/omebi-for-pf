name: deploy

on:
  push:
    branches:
      - main
      - push-images-to-ecr

env:
  AWS_REGION: ap-northeast-1
  IMAGE_TAG: ${{ github.sha }}
  SYSTEM_NAME: system
  SERVICE_NAME: omobi

jobs:
  deploy:
    name: Deploy app to AWS Fargate
    runs-on: ubuntu-latest

    # AWS認証情報の設定
    steps:
      - name: Configure aws credentials for prod
        # if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
          # Assume Roleする対象のIAMロールのARNの指定と権限の有効期間を指定
          role-to-assume: ${{ secrets.PROD_AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1800

      - name: Set env vars for prod
        # if: github.ref == 'refs/heads/main'
        run: echo "ENV_NAME=prod" >> $GITHUB_ENV

      - uses: actions/checkout@v2
      - run: docker-compose up -d --build laravel nginx

      # PHPパッケージのインストールとキャッシュ
      - name: Cache composer
        id: cache-composer
        uses: actions/cache@v2
        with:
          path: src/vendor
          key: composer-v1-${{ hashFiles('src/composer.lock') }}
      - run: docker-compose exec -T laravel composer install -n --prefer-dist --no-dev
        if: ${{ !steps.cache-composer.outputs.cache-hit }}
      
      # node関連のパッケージのインストールとキャッシュ
      - name: Cache npm
        id: cache-npm-ci
        uses: actions/cache@v2
        with:
          path: src/node_modules
          key: npm-v1-${{ hashFiles('src/package-lock.json') }}

      - run: docker-compose exec -T nginx npm ci
        if: ${{ !steps.cache-npm-ci.outputs.cache-hit }}
      - run: docker-compose exec -T nginx npm run production

      # ECRへログイン
      - uses: aws-actions/amazon-ecr-login@v1
        id: amazon-ecr-login

      # nginxのイメージのビルドとプッシュ
      - name: Push nginx image to ecr
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SYSTEM_NAME }}-${{ env.ENV_NAME }}-${{ env.SERVICE_NAME }}-nginx
        run: |
          docker build \
            --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
            -f docker/nginx/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # phpのイメージのビルドとプッシュ
        - name: Push php image to ecr
          env:
            DOCKER_BUILDKIT: 1
            ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
            ECR_REPOSITORY: ${{ env.SYSTEM_NAME }}-${{ env.ENV_NAME }}-${{ env.SERVICE_NAME }}-php
          run: |
            docker build \
              --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
              -f docker/php/Dockerfile \
              -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
              -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG